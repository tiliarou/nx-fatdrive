/* automatically generated by rust-bindgen */

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

pub type blkcnt_t = usize;
pub type blksize_t = u64;
pub type fsblkcnt_t = u64;
pub type fsfilcnt_t = u32;
pub type off_t = i64;
pub type dev_t = i16;
pub type uid_t = u16;
pub type gid_t = u16;
pub type ino_t = u16;
pub type mode_t = u32;
pub type wint_t = u32;
pub type nlink_t = u16;
#[repr(C)]
pub struct _reent {
    pub errno : i32,
    _padding : i32,
    _bindgen_opaque_blob: [u64; 236],
}
pub type suseconds_t = u64;
pub type time_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct timeval {
    pub tv_sec: time_t,
    pub tv_usec: suseconds_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Default)]
pub struct stat {
    pub st_dev: dev_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_size: u64,
    pub st_atime: time_t,
    pub st_spare1: ::std::os::raw::c_long,
    pub st_mtime: time_t,
    pub st_spare2: ::std::os::raw::c_long,
    pub st_ctime: time_t,
    pub st_spare3: ::std::os::raw::c_long,
    pub st_blksize: blksize_t,
    pub st_blocks: u64,
    pub st_spare4: [::std::os::raw::c_long; 2usize],
}

impl stat {
    pub const OWNER_READ  : u32 = 0o700;
    pub const OWNER_WRITE : u32 = 0o400;
    pub const OWNER_EXEC  : u32 = 0o200;
    pub const GROUP_READ  : u32 = 0o70;
    pub const GROUP_WRITE : u32 = 0o40;
    pub const GROUP_EXEC  : u32 = 0o20;
    pub const OTHER_READ  : u32 = 0o7;
    pub const OTHER_WRITE : u32 = 0o4;
    pub const OTHER_EXEC  : u32 = 0o2;

    pub const DIRECTORY : u32 = 0o40000;
    pub const FILE : u32 = 0o100000;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Default)]
pub struct statvfs {
    pub f_bsize: usize,
    pub f_frsize: usize,
    pub f_blocks: fsblkcnt_t,
    pub f_bfree: fsblkcnt_t,
    pub f_bavail: fsblkcnt_t,
    pub f_files: fsfilcnt_t,
    pub f_ffree: fsfilcnt_t,
    pub f_favail: fsfilcnt_t,
    pub f_fsid: u64,
    pub f_flag: u64,
    pub f_namemax: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct DIR_ITER {
    pub device: ::std::os::raw::c_int,
    pub dirStruct: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct devoptab_t {
    pub name: * const u8,
    pub structSize: usize,
    pub open_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            fileStruct: *mut ::std::os::raw::c_void,
            path: * const u8,
            flags: u32,
            mode: u32,
        ) -> i32,
    >,
    pub close_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            fd: *mut ::std::os::raw::c_void,
        ) -> i32,
    >,
    pub write_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            fd: *mut ::std::os::raw::c_void,
            ptr: * const u8,
            len: usize,
        ) -> isize,
    >,
    pub read_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            fd: *mut ::std::os::raw::c_void,
            ptr: *mut u8,
            len: usize,
        ) -> isize,
    >,
    pub seek_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            fd: *mut ::std::os::raw::c_void,
            pos: off_t,
            dir: i32,
        ) -> off_t,
    >,
    pub fstat_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            fd: *mut ::std::os::raw::c_void,
            st: *mut stat,
        ) -> i32,
    >,
    pub stat_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            file: * const u8,
            st: *mut stat,
        ) -> i32,
    >,
    pub link_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            existing: * const u8,
            newLink: * const u8,
        ) -> i32,
    >,
    pub unlink_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            name: * const u8,
        ) -> i32,
    >,
    pub chdir_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            name: * const u8,
        ) -> i32,
    >,
    pub rename_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            oldName: * const u8,
            newName: * const u8,
        ) -> i32,
    >,
    pub mkdir_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            path: * const u8,
            mode: u32,
        ) -> i32,
    >,
    pub dirStateSize: usize,
    pub diropen_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            dirState: *mut DIR_ITER,
            path: * const u8,
        ) -> *mut DIR_ITER,
    >,
    pub dirreset_r: Option<
        unsafe extern "C" fn(r: *mut _reent, dirState: *mut DIR_ITER) -> i32,
    >,
    pub dirnext_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            dirState: *mut DIR_ITER,
            filename: *mut u8,
            filestat: *mut stat,
        ) -> i32,
    >,
    pub dirclose_r: Option<
        unsafe extern "C" fn(r: *mut _reent, dirState: *mut DIR_ITER) -> i32,
    >,
    pub statvfs_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            path: * const u8,
            buf: *mut statvfs,
        ) -> i32,
    >,
    pub ftruncate_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            fd: *mut ::std::os::raw::c_void,
            len: off_t,
        ) -> i32,
    >,
    pub fsync_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            fd: *mut ::std::os::raw::c_void,
        ) -> i32,
    >,
    pub deviceData: *mut ::std::os::raw::c_void,
    pub chmod_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            path: * const u8,
            mode: mode_t,
        ) -> i32,
    >,
    pub fchmod_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            fd: *mut ::std::os::raw::c_void,
            mode: mode_t,
        ) -> i32,
    >,
    pub rmdir_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            name: * const u8,
        ) -> i32,
    >,
    pub lstat_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            file: * const u8,
            st: *mut stat,
        ) -> i32,
    >,
    pub utimes_r: Option<
        unsafe extern "C" fn(
            r: *mut _reent,
            filename: * const u8,
            times: *const timeval,
        ) -> i32,
    >,
}
extern "C" {
    pub fn AddDevice(device: *const devoptab_t) -> i32;
    pub fn FindDevice(name: * const u8) -> i32;
    pub fn RemoveDevice(name: * const u8) -> i32;
    pub fn setDefaultDevice(device: ::std::os::raw::c_int);
    pub fn GetDeviceOpTab(name : *const u8) -> *mut devoptab_t;
}


pub const NX_FATDRIVE_NAME_MAX : usize = 255;